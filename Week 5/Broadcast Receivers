Broadcast Receivers--
- Allow app to be notified when an event occurs
    - either system event (screen off, battery low, etc).
    - other app events (less common)
    - <10 seconds
- Entry point into an app to allow other components to do something in response to a notification.
- Intended to do a minimal amount of work.
- Often, BR's kickoff a service that does the actual work.


Process Heirarchy -- which process gets killed.
1. Foreground process
    - Running an activity the user is interacting with.
    - Broadcast receiver that is currently running.
    - Service currently executing code in a callback.


Creating a BroadcastReceiver
- Create a class that *extends* BroadcastReceiver
Choices next... either:
    1. Register the new BR in AndroidManifest && indicate which intent that BR responds to.
    2. Register dynamically with registerReceiver (don't forget to unregisterReceiver!) <-- leaked BR exception.
        onResume() (register here), onPause() (unregister here).

Alarm Manager
- register PendingIntent with AlarmManager

Broadcasts get wrapped up in an intent

ex for option 1 above:

<receiver
    android:name=".SystembootReceiver"
    android:exported="true">
    <intent-filter>
        <action android:name="android.intent.action.BOOT_COMPLETED" />
    </intent-filter>
</receiver>



ex for option 2 above:

(in MainActivity.java)

public class MainActivity extends AppCompatActivity {
    // Explicit BroadcastReceiver ex.
    AirplaneModeReceiver br = new AirplaneModeReceiver();

    .
    .
    .

    @Override
    protected void onStart() {
        super.onStart();
        IntentFilter intentFilter = new IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED);
        registerReceiver(br, filter);
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterReceiver(br);
    }
}


-----

(in AirplaneModeReceiver.java)


public class AirplaneModeReceiver extends BroadcastReceiver {
    @Override
    public void onReceive(Context context, Intent intent) {
        boolean airplaneMode = intent.getBooleanExtra("state", false);

        // in larger projects, probably best to split this up.
        if (Intent.ACTION_AIRPLANE_MODE_CHANGED.equals(intent.getAction())) {
            if (airplaneMode) {
                Toast.makeText(context, "Airplane mode is on", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(context, "Airplane mode is off", Toast.LENGTH_SHORT).show();
            }
        }
    }
}

...that's it!!      